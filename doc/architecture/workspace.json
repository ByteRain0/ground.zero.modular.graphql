{
  "configuration" : {
    "scope" : "SoftwareSystem"
  },
  "description" : "Description",
  "documentation" : {
    "decisions" : [ {
      "content" : "# 1. Record architecture decisions\n\nDate: 2025-02-21\n\n## Status\n\nAccepted\n\n## Context\n\nWe need to record the architectural decisions made on this project.\n\n## Decision\n\nWe will use Architecture Decision Records, as [described by Michael Nygard](http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions).\nThese records will serve as a structured and lightweight mechanism for documenting decisions.\n\n## Consequences\n\nSee Michael Nygard's article, linked above. For a lightweight ADR toolset, see Nat Pryce's [adr-tools](https://github.com/npryce/adr-tools).\n",
      "date" : "2025-02-21T00:00:00Z",
      "format" : "Markdown",
      "id" : "1",
      "status" : "Accepted",
      "title" : "Record architecture decisions"
    }, {
      "content" : "# 10. Auth strategy\n\nDate: 2025-02-22\n\n## Status\n\nProposed\n\n## Context\n\nWe need a mechanism to enforce **role-based authorization** at the application layer of the **Japanese.Api**. </br>\n\n\n## Decision\n\nA custom **MediatR pipeline behavior** will be implemented to handle authorization logic. </br>\n\n## Consequences / Tech aspects\n\n1. **Role Annotation:** </br>\n    - **MediatR IRequests** will be annotated with the `AuthorizeRolesAttribute`, specifying the required roles for each request. </br>\n2. **Pipeline Behavior:** </br>\n    - The `AuthorizationBehavior` will be executed for all **MediatR requests**. </br>\n    - Note: This approach may lead to **performance degradation** if the pipeline is executed multiple times during a single client-server request. </br>\n3. **Exception Handling:** </br>\n    - If the user does not have the required roles, the `AuthorizationBehavior` will raise a `ForbiddenException` with a detailed message. </br>\n    - This exception will be caught by the `GraphQLAuthExceptionFilter` and transformed into a **client-consumable error**. </br>\n4. **Role Management:** </br>\n    - **Keycloak** defines roles per application, allowing a user to have multiple role accesses to different applications within a single authentication token. </br>\n5. **Scope:** </br>\n    - Only **role-based authorization** is currently in scope for the **Japanese.Api**. </br>\n\n### Notes\n\nIn the future, we may explore: </br>\n- The **authorization setup introduced in HotChocolate 13**. </br>\n- Using **OPA (Open Policy Agent)** for advanced policy evaluations. </br>",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "10",
      "status" : "Proposed",
      "title" : "Auth strategy"
    }, {
      "content" : "# 11. Relay patterns usage\n\nDate: 2025-02-22\n\n## Status\n\nProposed\n\n## Context\n\nThe issue motivating this decision, and any context that influences or constrains the decision.\n\n## Decision\n\nThe change that we're proposing or have agreed to implement.\n\n## Consequences\n\nWhat becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.\n\n\n* https://www.youtube.com/watch?v=IrEZvLSxo3E",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "11",
      "status" : "Proposed",
      "title" : "Relay patterns usage"
    }, {
      "content" : "# 12. Graphql source generation\n\nDate: 2025-02-22\n\n## Status\n\nProposed\n\n## Context\n\nThe issue motivating this decision, and any context that influences or constrains the decision.\n\n## Decision\n\nThe change that we're proposing or have agreed to implement.\n\n## Consequences\n\nWhat becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.\n\n\nLinks\n* https://www.youtube.com/watch?v=s1rXR46h86o",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "12",
      "status" : "Proposed",
      "title" : "Graphql source generation"
    }, {
      "content" : "# 13. Dynamic author settings\n\nDate: 2025-02-22\n\n## Status\n\nProposed\n\n## Context\n\nThe system occasionally needs to handle dynamic data structures inferred from JSON files or databases. </br>  \nThere must be a way to dynamically infer schema types and hot-reload the schema whenever changes occur.\n\n## Decision\n\nWe will use **HotChocolate's ITypeModule** to integrate dynamic types into the GraphQL schema. </br>\n\n## Consequences\n\n\n### Proof of Concept (PoC)\n\n1. A PoC field named **Settings** will be added to the **Author** node. </br>\n2. The structure of the **Settings** object will be sourced from configuration files to simplify management. </br>\n\n---\n\n### Implementation\n\n3. An **AuthorSettingsModule** will be developed to:\n    - Read the structure of settings from the configuration. </br>\n    - Translate the settings into an **extension** on the **AuthorNode**. </br>\n\n---\n\n### Monitoring and Hot Reload\n\n4. The **AuthorSettingsModule** will monitor the configuration for changes. </br>\n5. When a change occurs:\n    - Existing requests will be completed. </br>\n    - The schema will be updated dynamically to reflect the changes.  \n",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "13",
      "status" : "Proposed",
      "title" : "Dynamic author settings"
    }, {
      "content" : "# 14. GraphQL Subscriptions and SSE\n\nDate: 2025-02-22\n\n## Status\n\nAccepted\n\n## Context\n\nClients require the ability to subscribe to real-time notifications for newly added anime.\n\n## Options\n\nThe following options were considered:\n1. **SignalR**\n2. **GraphQL Subscriptions** using Server-Sent Events (SSE) or WebSockets\n\n## Decision\n\nWe will implement **GraphQL subscriptions (SSE)** using the **HotChocolate.Subscriptions.* NuGet packages** and the **InMemory subscription provider**. </br>  \nSSE offers a half-duplex communication channel where the server can send messages to the client but not vice versa, making it ideal for one-way real-time data such as updates or notifications. </br>  \nWhile SignalR is a viable alternative and well-integrated into the .NET ecosystem, we opted for a more universal solution provided by HotChocolate.\n\n## Consequences\n\n### Positive:\n1. Enables clients to subscribe to specific events for real-time updates.\n2. Supports the use of **`ITopicEventSender`**, allowing events to be triggered from anywhere in the system.\n3. HotChocolate provides an abstraction layer, making it easier to change the subscription provider implementation in the future.\n4. Available subscription providers include: **InMemory**, **Redis**, and **RabbitMQ**.\n\n### Negative:\n1. Introduces coupling to HotChocolate abstractions.\n2. Does not support duplex communication (client-to-server messages).  ",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "14",
      "status" : "Accepted",
      "title" : "GraphQL Subscriptions and SSE"
    }, {
      "content" : "# 15. Graphql fusion gateway\n\nDate: 2025-02-22\n\n## Status\n\nAccepted\n\n## Context\n\nUsers searching for a new anime or manga to watch/read want to see ratings for the anime/manga. </br>\n\n## Decision\n\nA new **Rating.Api** will be created to encapsulate the logic related to ratings. </br>  \nTo simplify integration for front-end and other consumers, a **Fusion Gateway** will be placed in front of the **Japanese** and **Rating.Api**. </br>\n\n## Consequences\n\n1. The **Rating.Api** will manage all rating-related logic for anime and manga. </br>\n2. The initial implementation will utilize an in-memory database seeded with ratings via migrations. </br>\n3. A **Fusion Gateway** built using Fusion and Aspire will enable a distributed GraphQL schema. </br>\n4. **Rating.Api** will introduce an internal `LookUp` method and extend the **Anime** and **Manga** nodes with an additional `TotalRating` property. </br>\n5. The **Fusion Gateway** is not designed to handle auth by itself. It is the responsibility of the sub-graphs to do that.\n6. The **Fusion Gateway** will forward the Auth request headers to the sub-graphs for them to handle auth.\n\n\n### Setup\n\n- To set up required templates for future use, run:\n  ```bash\n  dotnet new install HotChocolate.Template\n\n## Additional resources\n- [Official documentation](https://chillicream.com/docs/fusion/v14)\n- [Fusion and Aspire](https://youtu.be/AHitpPCeM00?si=D6H_d7Ocdel4-zmX)",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "15",
      "status" : "Accepted",
      "title" : "Graphql fusion gateway"
    }, {
      "content" : "# 16. Recurring jobs\n\nDate: 2025-02-22\n\n## Status\n\nProposed\n\n## Context\n\nThe system requires the ability to execute specific operations in the background, ensuring that these tasks do not block the main application flow.\n\n## Decision\n\nWe will utilize **Hangfire** to manage and execute asynchronous operations in the background. </br>  \nInitially, the API itself will serve as the **Hangfire server**, responsible for executing background operations. </br>  \nIn the future, we may replace the API server with a dedicated **console application** to act as the Hangfire server.\n\n## Consequences\n\n### Positive:\n1. Enables the system to efficiently run background operations.\n2. **Hangfire API** is straightforward to configure and use.\n3. Integrates seamlessly with PostgreSQL, providing robust job tracking and persistence.\n4. Offers flexibility for future enhancements, such as adding an `enqueue` method to the **MediatR API** for handling background requests (to be addressed in a separate ADR).\n\n### Negative:\n1. Introduces an additional dependency into the system.\n2. New team members may face a learning curve in understanding and using Hangfire.  ",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "16",
      "status" : "Proposed",
      "title" : "Recurring jobs"
    }, {
      "content" : "# 17. Entity framework and database integration\n\nDate: 2025-02-22\n\n## Status\n\nAccepted\n\n## Context\n\nWe need a reliable data storage solution for managing anime and manga data. </br>\n\n## Decision\n\nWe will use **PostgreSQL** as the primary data store for the application. </br>\n\n## Consequences\n\n1. For local development, a single instance of the database will be spun up via **Aspire**, named **default-db**. </br>\n   **OTel** (OpenTelemetry) will be configured using **ServiceDefaults**. </br>\n2. Both modules (**Anime** and **Manga**) will share the same physical database but will use separate EF Core contexts. </br>\n3. The **AppHost** will manage the connection string and pass it to the API. </br>\n4. **Migrations**: </br>\n    - At design time (e.g., during migration creation), a connection to the database is required. Since the database runs via Aspire, a workaround is needed. </br>\n    - Custom **ContextDesignTimeFactory** classes will be created for each EF Core context. </br>\n    - A project reference will be added from the context's class library to the **AppHost**, like this:\n      ```xml\n      <ProjectReference Include=\"..\\..\\Modules\\Anime\\Anime.Service\\Anime.Service.csproj\" IsAspireProjectResource=\"false\" />\n      ```  \n5. Data seeding will be handled via **EF Core migrations**. </br>\n6. Entity configurations will be implemented using the **Fluent API**. </br>\n7. A separate worker service **Japanese.Api.MigrationService** will be created to apply migrations and run it via Aspire. </br>\n8. The **Application Layer** will reference the **DbContext** directly to eliminate unnecessary abstraction layers. </br>\n9. The use of **DataLoaders** in conjunction with EF Core contexts will be described in a separate ADR. </br>\n\n## Additional Resources\n\n1. [Adding EF Core Migrations to .NET Aspire Solutions](https://khalidabuhakmeh.com/add-ef-core-migrations-to-dotnet-aspire-solutions) </br>\n2. Example command to add a migration from the root:\n   ```bash\n   dotnet ef migrations add UserSettings --project src/Modules/Manga/Manga.Service/Manga.Service.csproj --startup-project src/Host/App.Host/App.Host.csproj --context MangaDbContext\n",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "17",
      "status" : "Accepted",
      "title" : "Entity framework and database integration"
    }, {
      "content" : "# 18. Async communication over message broker\n\nDate: 2025-02-22\n\n## Status\n\nAccepted\n\n## Context\n\nThe **Rating.Api** (and potentially other components in the future) needs to be informed when a new anime is added. </br>\nWe require a solution that supports **loose coupling** between components while ensuring high levels of **maintainability**. </br>\n\n## Decision\n\nWe will implement **RabbitMQ** as the message broker and use **MassTransit** for integration. </br>\nThe `App.Host` managed by Aspire will handle spinning up the RabbitMQ instance. </br>\n\n### Technical Implementation\n\n1. **Message Publishing:** </br>\n    - Messages will be sent to RabbitMQ through a dedicated interface called `IMessageSender`. </br>\n    - The `IMessageSender` interface will publish messages via MassTransit, making it easy to stub for testing purposes. </br>\n\n2. **Initial Use Case:** </br>\n    - **Japanese.Api** will publish an `anime:created` event whenever a new anime is added. </br>\n    - **Rating.Api** will subscribe to this event and act accordingly. </br>\n\n3. **Contract Handling:** </br>\n    - To simulate external dependency, the `anime:created` contract will be recreated inside the **Rating.Api** namespace. </br>\n    - This approach mimics receiving the contract via NuGet and isolates cross-service dependencies. </br>\n\n\n## Consequences\n\n\n### Benefits\n\n1. **Loose Coupling:** </br>\n    - Services can communicate without tight integration, promoting maintainability and scalability. </br>\n\n2. **Testing Flexibility:** </br>\n    - The use of `IMessageSender` allows for easy stubbing during tests, simplifying validation of services. </br>\n\n3. **Extensibility:** </br>\n    - The setup can be expanded to other components in the system as needed. </br>\n\n4. **Decoupled Contracts:** </br>\n    - Mimicking external contracts inside the consumer service (e.g., Rating.Api) reduces dependency on shared internal libraries. </br>\n\n### Drawbacks\n\n1. **Additional Complexity:** </br>\n    - Setting up RabbitMQ and integrating with MassTransit introduces more infrastructure and code dependencies. </br>\n\n2. **Message Broker Overhead:** </br>\n    - Using RabbitMQ requires monitoring and maintenance to ensure reliability. </br>\n\n\n\n## Additional resources\n\n1. [RabbitMq with Masstransit](https://youtu.be/NIi0DrUM1J0?si=mnP9oIFizLxT0-9R) </br>\n2. [Async communication patterns](https://youtu.be/XdpNXGqny9c?si=DbBOxb-iXikvhlpY) </br> ",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "18",
      "status" : "Accepted",
      "title" : "Async communication over message broker"
    }, {
      "content" : "# 19. Testing anime module\n\nDate: 2025-02-22\n\n## Status\n\nProposed\n\n## Context\n\nThe issue motivating this decision, and any context that influences or constrains the decision.\n\n## Decision\n\nThe change that we're proposing or have agreed to implement.\n\n## Consequences\n\nWhat becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.\n\n\nLinks:\nhttps://www.youtube.com/watch?v=g7wZYLj6kgk\nhttps://www.youtube.com/watch?v=7nDb5JDpvXw\nhttps://www.youtube.com/watch?v=Nf7nX2H_iiM\n",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "19",
      "status" : "Proposed",
      "title" : "Testing anime module"
    }, {
      "content" : "# 2. Container context definition\n\nDate: 2025-02-22\n\n## Status\n\nAccepted\n\n## Context\n\nCreate a C4 container level overview of the system.\n\n## Decision\n\nAdd a C4 diagram to the workspace depicting the system's containers.\n",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "2",
      "status" : "Accepted",
      "title" : "Container context definition"
    }, {
      "content" : "# 20. Testing manga module\n\nDate: 2025-02-22\n\n## Status\n\nProposed\n\n## Context\n\nThe issue motivating this decision, and any context that influences or constrains the decision.\n\n## Decision\n\nThe change that we're proposing or have agreed to implement.\n\n## Consequences\n\nWhat becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.\n",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "20",
      "status" : "Proposed",
      "title" : "Testing manga module"
    }, {
      "content" : "# 21. Testing rating api\n\nDate: 2025-02-22\n\n## Status\n\nProposed\n\n## Context\n\nThe issue motivating this decision, and any context that influences or constrains the decision.\n\n## Decision\n\nThe change that we're proposing or have agreed to implement.\n\n## Consequences\n\nWhat becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.\n",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "21",
      "status" : "Proposed",
      "title" : "Testing rating api"
    }, {
      "content" : "# 22. Testing strategy\n\nDate: 2025-02-22\n\n## Status\n\nProposed\n\n## Context\n\nThe issue motivating this decision, and any context that influences or constrains the decision.\n\n## Decision\n\nThe change that we're proposing or have agreed to implement.\n\n## Consequences\n\nWhat becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.\n\n\nhttps://youtu.be/KFqHXwwls3o?si=d0Lui2fGkTDV091P -> schema testing\n\nTODO:\n1. Testing strategy.\n2. Test types.\n3. Test class libraries and structure.\n4. Exporting test results inside the pipeline.\n5. Idea behind the 100% test coverage rule.\n6. Testing the entire app at least via some form of test.\n7. (optional) - E2E testing using playwright.",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "22",
      "status" : "Proposed",
      "title" : "Testing strategy"
    }, {
      "content" : "# 23. Testing system architecture\n\nDate: 2025-02-22\n\n## Status\n\nProposed\n\n## Context\n\nThe issue motivating this decision, and any context that influences or constrains the decision.\n\n## Decision\n\nThe change that we're proposing or have agreed to implement.\n\n## Consequences\n\nWhat becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.\n",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "23",
      "status" : "Proposed",
      "title" : "Testing system architecture"
    }, {
      "content" : "# 24. App configuration\n\nDate: 2025-02-22\n\n## Status\n\nProposed\n\n## Context\n\nThe issue motivating this decision, and any context that influences or constrains the decision.\n\n## Decision\n\nThe change that we're proposing or have agreed to implement.\n\n## Consequences\n\nWhat becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.\n\n\nTODO:\n1. Local development.\n2. Environments.\n3. Centralized configuration using springcloud config.",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "24",
      "status" : "Proposed",
      "title" : "App configuration"
    }, {
      "content" : "# 26. Dependencies management strategy\n\nDate: 2025-02-22\n\n## Status\n\nProposed\n\n## Context\n\nThe issue motivating this decision, and any context that influences or constrains the decision.\n\n## Decision\n\nThe change that we're proposing or have agreed to implement.\n\n## Consequences\n\nWhat becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.\n",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "25",
      "status" : "Proposed",
      "title" : "Dependencies management strategy"
    }, {
      "content" : "# 27. Auditing\n\nDate: 2025-02-26\n\n## Status\n\nProposed\n\n## Context\n\nThe issue motivating this decision, and any context that influences or constrains the decision.\n\n## Decision\n\nThe change that we're proposing or have agreed to implement.\n\n## Consequences\n\nWhat becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.\n\n* https://www.youtube.com/watch?v=VSEg4hXDkTA",
      "date" : "2025-02-26T00:00:00Z",
      "format" : "Markdown",
      "id" : "26",
      "status" : "Proposed",
      "title" : "Auditing"
    }, {
      "content" : "# 27. Identity Provider Integration\n\nDate: 2025-02-27\n\n## Status\n\nAccepted\n\n## Context\n\nThe application requires a robust mechanism for authentication and authorization.\n\n## Decision\n\nWe have chosen **Keycloak** as the identity provider. </br>  \nKeycloak is free of charge and integrates seamlessly with **Aspire**.\n\n## Consequences\n\n\n### Configurations\n\n1. **Keycloak** will serve as the identity provider for the API. </br>\n2. For local development, a preconfigured instance of Keycloak will be started using **Aspire**. </br>\n3. Realm configurations will be stored in the `./configurations/keycloak` directory.\n\n### Authentication\n\nAuthentication will initially be handled directly by Keycloak. </br>  \nIn the future, we may decide to shift authentication methods to the API itself.\n\n### Authorization\n\n1. Role-based authorization will be used for now, as entitlements/permissions are unnecessary for the project's current scope. </br>\n2. A custom attribute, **`AuthorizeRoles`**, will be implemented to accept a list of roles for authorization checks. </br>\n3. The **`AuthorizeRoles`** attribute will be applied in the **Contracts** class libraries on **MediatR requests**. </br>\n4. A **MediatR pipeline behavior** will be created to verify user roles against the roles specified in the attribute.\n\n### Entity-Based Permissions\n\nFine-grained control checks for entity-based permissions will be addressed in a separate ADR.",
      "date" : "2025-02-27T00:00:00Z",
      "format" : "Markdown",
      "id" : "27",
      "status" : "Accepted",
      "title" : "Identity Provider Integration"
    }, {
      "content" : "# 3. Component context definition\n\nDate: 2025-02-22\n\n## Status\n\nAccepted\n\n## Context\n\nCreate a C4 component level overview of the Japanese.Api.\nExplain the rationale behind implementing the Anime and Manga modules in different ways and their respective design decisions.\n\n## Solution\n\nCreate a C4 component level diagram covering the Anime & Manga modules of the Japanese.Api.\n\n## Additional details\n\n### High level decisions\n- The **Anime module** follows a more traditional, albeit simplified, Onion Architecture template. In this setup, GraphQL will primarily act at the API layer.\n- The **Manga module** adopts a **GraphQL over Database** (EF Core) approach, directly exposing `IQueryables` to clients, allowing them to build their queries dynamically.\n- A **Bridge module** will be introduced to unify the public APIs of both modules at the GraphQL level.\n\n---\n\n### Anime module\n\n#### Anime contracts library structure:\n- **Exceptions**: Lists exceptions specific to the module.\n- **Models**: Contains domain models and integration events.\n   - **Events**\n      - Events for client subscriptions.\n      - Events for inter-module or system-wide subscriptions.\n- **Services**\n   - Organized by **Node** (domain entities), containing commands, queries, metrics, and telemetry tags.\n      - **Commands**: Command definitions and validators.\n      - **Queries**: Query definitions, validators, and filters.\n      - **Metrics**: Metrics for the node.\n      - **Telemetry**: Tags specific to the node for observability.\n\n#### Anime GraphQL library structure:\n- **Nodes**: Represents domain entities as GraphQL types.\n- **Mutations**: Command inputs and (optional) response types.\n- **Subscriptions**: Subscription types.\n- **Queries**: Query types.\n- Additional GraphQL-specific definitions like constraints and enums.\n\n#### Anime service library structure:\n- **Application**\n   - **CommandHandlers**: Handles business operations for commands.\n   - **QueryHandlers**: Handles business operations for queries.\n   - **EventHandlers**: Handles async cross-module events.\n- **Infrastructure**\n   - **Data**\n      - **Configurations**: EF Core model configurations.\n      - **DataLoaders**: Integrate EF Core for data fetching.\n      - **Migrations**: Database migrations.\n      - **Seed**: Data seeding classes.\n      - **ModuleDbContext**: Database context for the module.\n   - **ModuleInfo.cs**: Metadata for HotChocolate source generation.\n   - **ServiceCollectionExtensions.cs**: Dependency Injection setup.\n\n   \n#### Boilerplate mitigation\n- **Contracts Library as Domain Layer**:\n- **Domain Models Reuse**: Domain models will be reused in the EF Core `DbContext`.\n- **EF Core Configurations**: Mappings will be handled via configurations to efficiently map domain models to the database.\n- **GraphQL Nodes**: Nodes will also be based on domain models, with configurations used to fine-tune the exposed data and operations.\n\n---\n\n### Manga module\n\n#### Manga contracts library structure:\n- **Models**: Contains domain models and integration events.\n- **Services**\n   - Organized by **Node** (domain entities), containing queries, metrics, and telemetry tags.\n      - **Queries**: Query definitions, validators, and filters.\n\n#### Anime GraphQL library structure:\n- **Nodes**: Represents domain entities as GraphQL types.\n- **Queries**: Query types.\n- Additional GraphQL-specific definitions like constraints and enums.\n\n#### Manga service library structure:\n- **Application**\n    - **QueryHandlers**: Handles business operations for queries and exposes EF Core integration to GraphQL queries (engine).\n- **Infrastructure**\n    - **Data**\n        - **Configurations**: EF Core model configurations.\n        - **Migrations**: Database migrations.\n        - **Seed**: Data seeding classes.\n        - **Dynamic Types**: Author settings have a dynamic structure that can be exposed via GraphQL. \n        - **ModuleDbContext**: Database context for the module.\n    - **ModuleInfo.cs**: Metadata for HotChocolate source generation.\n    - **ServiceCollectionExtensions.cs**: Dependency Injection setup.",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "3",
      "status" : "Accepted",
      "title" : "Component context definition"
    }, {
      "content" : "# 4. F5 Experience\n\nDate: 2025-02-22\n\n## Status\n\nAccepted\n\n## Context\n\nNew developers should be able to easily set up and run the solution on a clean machine.\n\n## Decision\n\nWe will use `.NET Aspire` to enhance the local development environment, as it provides integrated tools and capabilities tailored for .NET applications.\n\n## Alternatives\n\n**Docker Compose**: While Docker Compose provides a robust way to orchestrate containers, it requires additional configuration and maintenance overhead, which may complicate the development process for this specific use case.\n\n\n## Consequences\n\n- Local development will be more straightforward and aligned with .NET-specific workflows.\n- Aspire will handle infrastructure provisioning for local development.\n- Faster and less complex setup process.\n- Developers will be provided with 2 launch profiles:\n  - single-project : which will run only the Japanese.Api and it's dependencies\n  - http/https : which will run Japanese.Api, Rating.Api and Fusion Gateway.\n- Dependency on .NET Aspire tools means the team must stay up-to-date with its latest updates and best practices.\n- Deployment artifacts/manifests will be generated using the `Aspirate` project until native Kubernetes support is provided.\n\n\nFor further details, see the documentation for .NET Aspire and compare it with other solutions like Docker Compose if needed.",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "4",
      "status" : "Accepted",
      "title" : "F5 Experience"
    }, {
      "content" : "# 5. Data loaders architecture\n\nDate: 2025-02-22\n\n## Status\n\nAccepted\n\n## Context\n---\n\n#### Requirements\nAPI clients may need to fetch additional, related information about entities such as studios or authors linked to anime/manga. </br>\nThe challenge is that the specific data clients require can vary, and their requests might not be predictable in advance. </br>\nIdeally, all required data should be retrievable in a single API query. </br>\n\n#### N+1 problem\nEvery data fetching technology is prone to suffer from n+1 problem. </br>\nThe problem/difference from REST is that in a GraphQL api the n+1 problem occurs on the server rather then the client. </br> </br>\nThe problem with the GraphQL backend is that field resolvers are atomic and do not have any knowledge about the query as a whole. So, a field resolver does not know that it will be called multiple times in parallel to fetch similar or equal data from the same data source. </br> </br>\nA field resolver without a data loader would get called in parallel multiple times in a fetch of multiple items. </br>\nThis request would cause multiple requests to our data source resulting in sluggish performance and unnecessary round-trips to our data source\n\n## Decision\n---\n\nWe will use **data loaders** to address the **N+1 problem** that can arise when GraphQL field resolvers independently retrieve related data. </br>\nTo enable this, additional fields will be added to the model nodes, which will resolve their data by making efficient batch calls via data loaders. </br>\n\n## Consequences\n---\n\nChallenges with Default GraphQL Field Resolvers\n\n1. **Atomic Nature of Resolvers:** </br>\n   Field resolvers operate independently and are unaware of the overall query, leading to inefficiencies when multiple resolvers fetch similar or identical data. </br>\n\n2. **N+1 Problem:** </br>\n   For example, if a query retrieves 10 anime and their respective studios, without optimization, the process would involve: </br>\n    - 1 `GetAnimeQuery` to fetch 10 anime. </br>\n    - 10 individual `GetStudioById` queries to fetch studios, resulting in 11 total queries instead of batching them into fewer queries. </br>\n\n[Data Loader](https://chillicream.com/docs/hotchocolate/v15/fetching-data/dataloader) Architecture:\n\nTo prevent the N+1 problem, we will implement **data loaders** with the following approach:\n\n1. **Query Example:** </br>\n    - The API exposes the `GetAnime` query. </br>\n    - The `AnimeNode` is structured as follows:\n        - **Ignore the `StudioId` field** in the `Anime` model.\n        - Add a **custom field resolver**:\n          ```csharp\n          public static async Task<Studio?> GetStudioAsync([Parent] Anime anime, IMediator mediator) \n              => await mediator.Send(new GetStudioById(anime.StudioId));\n          ```\n\n2. **Resolver Workflow:** </br>\n    - A GraphQL request to fetch 10 anime with their respective studios triggers the resolver for `GetStudioAsync`. </br>\n    - The resolver sends a `GetStudioById` **MediatR request** for each anime. </br>\n    - The `GetStudioById` handler calls the **data loader** to fetch the required studio. </br>\n    - The **data loader** in turn caches the request to fetch the studio and executes it only after all resolvers from the request are executed.\n\n3. **Batching and Caching:** </br>\n    - Data loaders cache promises for fetching data, ensuring that the same key is resolved only once per request scope. </br>\n    - Once all resolvers are executed, the data loader triggers a **batch fetch** to retrieve data in a single operation. </br>\n\n4. **Data Loader Setup:** </br>\n    - Data loaders will be defined in the **Infrastructure folder** of the respective service's class libraries. </br>\n    - Methods annotated with `[DataLoader]` generate auto-implemented interfaces via the **GreenDonut library**. </br>\n    - Example setup in `ModuleInfo` ensures correct scoping: </br>\n      ```csharp\n      [assembly: DataLoaderDefaults(ServiceScope = DataLoaderServiceScope.DataLoaderScope)]\n      ```\n    - Data loader classes are defined as `internal sealed`. </br>\n    - Inject data loader services from the **DI container** to promote reuse and efficiency. </br>\n\nBenefits of Data loader usage:\n1. Reduces the number of database queries by batching similar requests into fewer operations. </br>\n2. Improves performance and scalability for GraphQL queries involving related data. </br>\n3. Simplifies client-side queries by allowing all required data to be retrieved in a single API request.\n\n## Additional resources:\n\n---\n\n* [Data loader documentation](https://chillicream.com/docs/hotchocolate/v15/fetching-data/dataloader)\n* [General overview](https://youtu.be/gVIxde5nlWE?si=pYRUm6e5ovfFbwpM)\n* [Green donut overview](https://youtu.be/FhNK7KMAnXc?si=u_cTZZa2rdI0QuIF)",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "5",
      "status" : "Accepted",
      "title" : "Data loaders architecture"
    }, {
      "content" : "# 6. EfCore exposure via graphql\n\nDate: 2025-02-22\n\n## Status\n\nAccepted\n\n## Context\n\n\n\n## Decision\n\nThe change that we're proposing or have agreed to implement.\n* Projections\n* Filtering\n* Pagination\n\n## Consequences\n\nWhat becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.\n",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "6",
      "status" : "Accepted",
      "title" : "EfCore exposure via graphql"
    }, {
      "content" : "# 7. Error handling strategy\n\nDate: 2025-02-22\n\n## Status\n\nProposed\n\n## Context\n\nThe issue motivating this decision, and any context that influences or constrains the decision.\n\n## Decision\n\nThe change that we're proposing or have agreed to implement.\n\n## Consequences\n\nWhat becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.\n\n1. Exception handling middleware.\n2. Throwing exceptions in case operation results in failure.\n3. Explicit definition of exceptions for clients to be aware of possible issues.\n\n* https://www.youtube.com/watch?v=Zx0nvTUfjn4\n* https://productionreadygraphql.com/2020-08-01-guide-to-graphql-errors",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "7",
      "status" : "Proposed",
      "title" : "Error handling strategy"
    }, {
      "content" : "# 8. Observability strategy\n\nDate: 2025-02-22\n\n## Status\n\nAccepted\n\n## Context\n\nThe solution requires a robust observability setup to ensure effective monitoring, debugging, and performance tracking.\n\n## Decision\n\nWe will adopt the OpenTelemetry observability stack to gather signals (logs, spans, metrics) from the system.  \nSignals will be pushed from the API to an OTel collector, which will forward them to the observability backends.\n\n## Consequences\n\n### Architecture Setup\n\n- **Current Setup**:  \n  The API will push signals to a pre-configured OTel collector.  \n  For local development, we will utilize Aspire Dashboard as an aggregation solution.\n\n- **Live Environment**:  \n  The live setup will be more comprehensive and will include:\n    1. OTel Collector\n    2. Loki - Log aggregation solution\n    3. Prometheus - Metrics and monitoring solution\n    4. Tempo - Tracing backend solution\n    5. Grafana - Observability platform\n\n- **Local Development**:  \n  The OTel collector instance will run as part of the Aspire app host.\n\n- **Configuration Management**:  \n  Live environment configurations for the collector and services will be stored in the `./configurations` folder.\n\n### Configurations\n\n- **API Configuration**:  \n  OTel configurations will be maintained in the Core class library.  \n  The `RunTimeDiagnosticConfig` will be used to create custom spans and metrics across the solution.  \n  `MediatR` behaviors will be utilized to generate additional logs and spans related to request execution.  \n  Additional instrumentation libraries will be included to increase the volume and granularity of signals collected:\n    1. HotChocolate.Diagnostics\n    2. Npgsql.OpenTelemetry\n    3. OpenTelemetry.Instrumentation.EntityFrameworkCore\n    4. etc.\n\n### Observability Strategy\n\n1. Treat logs as human-readable audit events.\n2. Use spans to provide additional context that complements the logs, offering a clearer understanding of events.\n3. Collect metrics to capture relevant usage data about the application.\n4. Leverage signals for setting up alerts in case of issues.\n5. **Trace Processing Strategy**:\n    - Filter out PII data.\n    - Sample only 10% of health checks.\n    - Sample only 10% of Hangfire probes.\n    - Sample all traces for requests with errors.\n    - Sample all traces for requests exceeding the expected NFR (±500ms).\n    - ...\n\n6. Use unit tests to validate that the expected signal formats are consistently maintained.\n\n## Additional resources:\n1. [OpenTelemetry documentation](https://opentelemetry.io/)\n2. [OpenTelemetry Collector Configuration](https://opentelemetry.io/docs/collector/configuration)\n3. [OpenTelemetry Tail Sampling Processor](https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/tailsamplingprocessor/README.md)\n4. [Practical open telemetry workshop](https://github.com/martinjt/practical-otel-workshop/tree/main)\n5. [OTel collector configuration validator](https://www.otelbin.io/)",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "8",
      "status" : "Accepted",
      "title" : "Observability strategy"
    }, {
      "content" : "# 9. Input validation strategy\n\nDate: 2025-02-22\n\n## Status\n\nAccepted\n\n## Context\n\nThe API needs a mechanism to validate data received from clients.\n\n## Decision\n\nWe will use the **FairyBread** and **FluentValidation** NuGet packages to implement input validation for the API. </br>  \nThis approach provides integrated behavior, where **ValidationExceptions** will be converted into explicit GraphQL errors. </br>  \nAdditionally, the **ValidationException** class will be reused for business-related validation checks, such as duplicate names.\n\n## Consequences\n\n1. Validation will occur only at the system's entry points.\n2. Public validators must be created for all commands/queries to ensure they are registered by **FairyBread**.\n3. For business rule violations (e.g., duplicate names), throw a **ValidationException**. The **BusinessValidationErrorFilter** will catch these exceptions and transform them into user-friendly errors for the client.\n4. Validation beyond the API's entry points (e.g., across method calls) will be skipped under the assumption that our internal code is reliable.  \n",
      "date" : "2025-02-22T00:00:00Z",
      "format" : "Markdown",
      "id" : "9",
      "status" : "Accepted",
      "title" : "Input validation strategy"
    } ]
  },
  "id" : 1,
  "lastModifiedDate" : "2025-02-27T16:06:59Z",
  "model" : {
    "people" : [ {
      "id" : "89",
      "location" : "Unspecified",
      "name" : "Client",
      "properties" : {
        "structurizr.dsl.identifier" : "user"
      },
      "relationships" : [ {
        "description" : "Interact",
        "destinationId" : "86",
        "id" : "90",
        "sourceId" : "89",
        "tags" : "Relationship",
        "technology" : "HTTP"
      }, {
        "description" : "Interact",
        "destinationId" : "1",
        "id" : "91",
        "linkedRelationshipId" : "90",
        "sourceId" : "89",
        "technology" : "HTTP"
      } ],
      "tags" : "Element,Person"
    } ],
    "softwareSystems" : [ {
      "containers" : [ {
        "description" : "Management dashboard used for local development",
        "documentation" : { },
        "id" : "2",
        "name" : "Aspire Dashboard",
        "properties" : {
          "structurizr.dsl.identifier" : "software_system.aspire_dashboard"
        },
        "tags" : "Element,Container,AspireBase"
      }, {
        "documentation" : { },
        "id" : "3",
        "name" : "Telemetry Collector",
        "properties" : {
          "structurizr.dsl.identifier" : "software_system.telemetry_collector"
        },
        "relationships" : [ {
          "description" : "Push telemetry",
          "destinationId" : "2",
          "id" : "4",
          "sourceId" : "3",
          "tags" : "Relationship"
        } ],
        "tags" : "Element,Container"
      }, {
        "documentation" : { },
        "id" : "5",
        "name" : "Manga.DB",
        "properties" : {
          "structurizr.dsl.identifier" : "software_system.japanese_database"
        },
        "tags" : "Element,Container,Database"
      }, {
        "documentation" : { },
        "id" : "6",
        "name" : "Rating.Cache",
        "properties" : {
          "structurizr.dsl.identifier" : "software_system.rating_database"
        },
        "tags" : "Element,Container,Database"
      }, {
        "documentation" : { },
        "id" : "7",
        "name" : "Keycloak",
        "properties" : {
          "structurizr.dsl.identifier" : "software_system.keycloak"
        },
        "tags" : "Element,Container,Service"
      }, {
        "description" : "Service that can be run from the pipeline in order to apply migrations to the Database",
        "documentation" : { },
        "id" : "8",
        "name" : "Japanese.Api.MigrationService",
        "properties" : {
          "structurizr.dsl.identifier" : "software_system.migration_service"
        },
        "relationships" : [ {
          "destinationId" : "5",
          "id" : "9",
          "sourceId" : "8",
          "tags" : "Relationship"
        }, {
          "destinationId" : "3",
          "id" : "10",
          "sourceId" : "8",
          "tags" : "Relationship"
        } ],
        "tags" : "Element,Container"
      }, {
        "documentation" : { },
        "id" : "11",
        "name" : "RabbitMq",
        "properties" : {
          "structurizr.dsl.identifier" : "software_system.message_broker"
        },
        "tags" : "Element,Container,Messagebroker"
      }, {
        "components" : [ {
          "documentation" : { },
          "group" : "Utilities",
          "id" : "17",
          "name" : "MediatR",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.mediatr"
          },
          "tags" : "Element,Component"
        }, {
          "documentation" : { },
          "group" : "Utilities",
          "id" : "18",
          "name" : "OTel",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.otel"
          },
          "tags" : "Element,Component"
        }, {
          "documentation" : { },
          "group" : "Utilities",
          "id" : "19",
          "name" : "Auth",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.auth"
          },
          "tags" : "Element,Component"
        }, {
          "documentation" : { },
          "group" : "Utilities",
          "id" : "20",
          "name" : "ErrorFilters",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.error_filters"
          },
          "tags" : "Element,Component"
        }, {
          "documentation" : { },
          "group" : "Utilities",
          "id" : "21",
          "name" : "Hangfire",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.hangfire"
          },
          "tags" : "Element,Component"
        }, {
          "documentation" : { },
          "group" : "Utilities",
          "id" : "22",
          "name" : "Masstransit",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.masstransit"
          },
          "tags" : "Element,Component"
        }, {
          "documentation" : { },
          "group" : "Anime module",
          "id" : "23",
          "name" : "GraphQL topic event sender",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.graphql_topic_event_sender"
          },
          "tags" : "Element,Component"
        }, {
          "description" : "Domain model",
          "documentation" : { },
          "group" : "Anime module",
          "id" : "24",
          "name" : "Anime",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.anime_model"
          },
          "tags" : "Element,Component"
        }, {
          "description" : "Configure how the Anime model maps to the database table",
          "documentation" : { },
          "group" : "Anime module",
          "id" : "25",
          "name" : "Anime DB Configuration",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.anime_configuration"
          },
          "relationships" : [ {
            "description" : "Configure",
            "destinationId" : "24",
            "id" : "26",
            "sourceId" : "25",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "description" : "DbContext that maps to the Anime Schema",
          "documentation" : { },
          "group" : "Anime module",
          "id" : "27",
          "name" : "Anime DbContext",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.anime_data_context"
          },
          "relationships" : [ {
            "destinationId" : "5",
            "id" : "28",
            "sourceId" : "27",
            "tags" : "Relationship"
          }, {
            "description" : "Use configuration",
            "destinationId" : "25",
            "id" : "29",
            "sourceId" : "27",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "documentation" : { },
          "group" : "Anime module",
          "id" : "30",
          "name" : "Messaging Notification Handler",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.anime_messaging_notification_handler"
          },
          "relationships" : [ {
            "description" : "Publish notification",
            "destinationId" : "11",
            "id" : "31",
            "sourceId" : "30",
            "tags" : "Relationship",
            "technology" : "Masstransit"
          } ],
          "tags" : "Element,Component"
        }, {
          "documentation" : { },
          "group" : "Anime module",
          "id" : "32",
          "name" : "GraphQL Notification Handler",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.anime_graphql_notification_handler"
          },
          "relationships" : [ {
            "description" : "Publish event",
            "destinationId" : "23",
            "id" : "33",
            "sourceId" : "32",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "documentation" : { },
          "group" : "Anime module",
          "id" : "34",
          "name" : "Anime command handlers",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.anime_command_handlers"
          },
          "relationships" : [ {
            "description" : "Mutate data",
            "destinationId" : "27",
            "id" : "35",
            "sourceId" : "34",
            "tags" : "Relationship"
          }, {
            "description" : "Publish notification",
            "destinationId" : "30",
            "id" : "36",
            "sourceId" : "34",
            "tags" : "Relationship",
            "technology" : "MediatR"
          }, {
            "description" : "Publish notification",
            "destinationId" : "32",
            "id" : "37",
            "sourceId" : "34",
            "tags" : "Relationship",
            "technology" : "MediatR"
          } ],
          "tags" : "Element,Component"
        }, {
          "documentation" : { },
          "group" : "Anime module",
          "id" : "38",
          "name" : "Anime DataLoaders",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.anime_data_loader"
          },
          "relationships" : [ {
            "description" : "Batch query data",
            "destinationId" : "27",
            "id" : "39",
            "sourceId" : "38",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "documentation" : { },
          "group" : "Anime module",
          "id" : "40",
          "name" : "Anime query handlers",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.anime_query_handlers"
          },
          "relationships" : [ {
            "description" : "Query data",
            "destinationId" : "38",
            "id" : "41",
            "sourceId" : "40",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "description" : "Configure how Anime model is exposed via GraphQL",
          "documentation" : { },
          "group" : "Anime module",
          "id" : "42",
          "name" : "Anime node",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.anime_node"
          },
          "relationships" : [ {
            "description" : "Configure",
            "destinationId" : "24",
            "id" : "43",
            "sourceId" : "42",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "documentation" : { },
          "group" : "Anime module",
          "id" : "44",
          "name" : "Anime mutations",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.anime_mutations"
          },
          "relationships" : [ {
            "description" : "Send command",
            "destinationId" : "34",
            "id" : "45",
            "sourceId" : "44",
            "tags" : "Relationship",
            "technology" : "MediatR"
          } ],
          "tags" : "Element,Component"
        }, {
          "documentation" : { },
          "group" : "Anime module",
          "id" : "46",
          "name" : "Anime queries",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.anime_queries"
          },
          "relationships" : [ {
            "description" : "Send query",
            "destinationId" : "40",
            "id" : "47",
            "sourceId" : "46",
            "tags" : "Relationship",
            "technology" : "MediatR"
          }, {
            "description" : "Expose for quering",
            "destinationId" : "42",
            "id" : "48",
            "sourceId" : "46",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "documentation" : { },
          "group" : "Anime module",
          "id" : "49",
          "name" : "Anime subscriptions",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.anime_subscriptions"
          },
          "relationships" : [ {
            "description" : "Subscribe to anime events",
            "destinationId" : "23",
            "id" : "50",
            "sourceId" : "49",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "description" : "Domain model",
          "documentation" : { },
          "group" : "Manga module",
          "id" : "51",
          "name" : "Manga",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.manga_model"
          },
          "tags" : "Element,Component"
        }, {
          "description" : "Domain model",
          "documentation" : { },
          "group" : "Manga module",
          "id" : "52",
          "name" : "Author",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.author_model"
          },
          "tags" : "Element,Component"
        }, {
          "description" : "Configure how the Manga model maps to the database table",
          "documentation" : { },
          "group" : "Manga module",
          "id" : "53",
          "name" : "Manga Configuration",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.manga_configuration"
          },
          "relationships" : [ {
            "description" : "Configure",
            "destinationId" : "51",
            "id" : "54",
            "sourceId" : "53",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "description" : "Configure how the Author model maps to the database table",
          "documentation" : { },
          "group" : "Manga module",
          "id" : "55",
          "name" : "Author Configuration",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.author_configuration"
          },
          "relationships" : [ {
            "description" : "Configure",
            "destinationId" : "52",
            "id" : "56",
            "sourceId" : "55",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "description" : "Configure dynamic settings field for graphql node and map to model property",
          "documentation" : { },
          "group" : "Manga module",
          "id" : "57",
          "name" : "Author Settings Module",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.author_settings_model"
          },
          "relationships" : [ {
            "description" : "Configure",
            "destinationId" : "52",
            "id" : "58",
            "sourceId" : "57",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "description" : "DbContext that maps to the Manga Schema",
          "documentation" : { },
          "group" : "Manga module",
          "id" : "59",
          "name" : "Manga DbContext",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.manga_data_context"
          },
          "relationships" : [ {
            "destinationId" : "5",
            "id" : "60",
            "sourceId" : "59",
            "tags" : "Relationship"
          }, {
            "description" : "Use configuration",
            "destinationId" : "53",
            "id" : "61",
            "sourceId" : "59",
            "tags" : "Relationship"
          }, {
            "description" : "Use configuration",
            "destinationId" : "55",
            "id" : "62",
            "sourceId" : "59",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "description" : "Return IQueryable and allow GraphQL execution engine to directly tap into the EfCore DbContext to build queries and projections",
          "documentation" : { },
          "group" : "Manga module",
          "id" : "63",
          "name" : "Manga Query Handler",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.manga_query_handler"
          },
          "relationships" : [ {
            "description" : "Query data",
            "destinationId" : "59",
            "id" : "64",
            "sourceId" : "63",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "documentation" : { },
          "group" : "Manga module",
          "id" : "65",
          "name" : "Manga Queries",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.manga_queries"
          },
          "relationships" : [ {
            "description" : "Send query",
            "destinationId" : "63",
            "id" : "66",
            "sourceId" : "65",
            "tags" : "Relationship",
            "technology" : "MediatR"
          } ],
          "tags" : "Element,Component"
        }, {
          "documentation" : { },
          "id" : "67",
          "name" : "GraphQL engine",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.graphql_execution_engine"
          },
          "relationships" : [ {
            "destinationId" : "44",
            "id" : "68",
            "sourceId" : "67",
            "tags" : "Relationship"
          }, {
            "destinationId" : "46",
            "id" : "69",
            "sourceId" : "67",
            "tags" : "Relationship"
          }, {
            "destinationId" : "49",
            "id" : "70",
            "sourceId" : "67",
            "tags" : "Relationship"
          }, {
            "destinationId" : "65",
            "id" : "71",
            "sourceId" : "67",
            "tags" : "Relationship"
          }, {
            "description" : "Load configuration",
            "destinationId" : "57",
            "id" : "72",
            "sourceId" : "67",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "description" : "Validate GraphQL requests before they hit MediatR",
          "documentation" : { },
          "id" : "73",
          "name" : "FairyBread",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.fairybread_validator"
          },
          "relationships" : [ {
            "description" : "Register validators",
            "destinationId" : "67",
            "id" : "74",
            "sourceId" : "73",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "documentation" : { },
          "id" : "75",
          "name" : "Host",
          "properties" : {
            "structurizr.dsl.identifier" : "software_system.manga_api.host"
          },
          "relationships" : [ {
            "description" : "Host",
            "destinationId" : "67",
            "id" : "76",
            "sourceId" : "75",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        } ],
        "documentation" : { },
        "id" : "12",
        "name" : "Japanese.Api",
        "properties" : {
          "structurizr.dsl.identifier" : "software_system.manga_api"
        },
        "relationships" : [ {
          "destinationId" : "5",
          "id" : "13",
          "sourceId" : "12",
          "tags" : "Relationship"
        }, {
          "destinationId" : "3",
          "id" : "14",
          "sourceId" : "12",
          "tags" : "Relationship"
        }, {
          "description" : "Auth",
          "destinationId" : "7",
          "id" : "15",
          "sourceId" : "12",
          "tags" : "Relationship",
          "technology" : "HTTP"
        }, {
          "description" : "Pub/Sub",
          "destinationId" : "11",
          "id" : "16",
          "sourceId" : "12",
          "tags" : "Relationship"
        } ],
        "tags" : "Element,Container,Service"
      }, {
        "documentation" : { },
        "id" : "77",
        "name" : "Rating.API",
        "properties" : {
          "structurizr.dsl.identifier" : "software_system.rating_api"
        },
        "relationships" : [ {
          "destinationId" : "6",
          "id" : "78",
          "sourceId" : "77",
          "tags" : "Relationship"
        }, {
          "destinationId" : "3",
          "id" : "79",
          "sourceId" : "77",
          "tags" : "Relationship"
        }, {
          "description" : "Auth",
          "destinationId" : "7",
          "id" : "80",
          "sourceId" : "77",
          "tags" : "Relationship",
          "technology" : "HTTP"
        }, {
          "description" : "Pub/Sub",
          "destinationId" : "11",
          "id" : "81",
          "sourceId" : "77",
          "tags" : "Relationship"
        } ],
        "tags" : "Element,Container,Service"
      }, {
        "description" : "Fusion gateway",
        "documentation" : { },
        "id" : "82",
        "name" : "Gateway",
        "properties" : {
          "structurizr.dsl.identifier" : "software_system.api_gateway"
        },
        "relationships" : [ {
          "description" : "Query for ratings",
          "destinationId" : "77",
          "id" : "83",
          "sourceId" : "82",
          "tags" : "Relationship",
          "technology" : "GraphQL"
        }, {
          "description" : "Query for anime/manga information",
          "destinationId" : "12",
          "id" : "84",
          "sourceId" : "82",
          "tags" : "Relationship",
          "technology" : "GraphQL"
        } ],
        "tags" : "Element,Container"
      }, {
        "description" : "Aspire app host used for local development",
        "documentation" : { },
        "id" : "85",
        "name" : "App.Host",
        "properties" : {
          "structurizr.dsl.identifier" : "software_system.aspire_host"
        },
        "tags" : "Element,Container,AspireBase"
      }, {
        "documentation" : { },
        "id" : "86",
        "name" : "Web Application",
        "properties" : {
          "structurizr.dsl.identifier" : "software_system.web_ui"
        },
        "relationships" : [ {
          "description" : "Send requests",
          "destinationId" : "82",
          "id" : "87",
          "sourceId" : "86",
          "tags" : "Relationship",
          "technology" : "HTTP"
        }, {
          "description" : "Authenticate",
          "destinationId" : "7",
          "id" : "88",
          "sourceId" : "86",
          "tags" : "Relationship",
          "technology" : "HTTP"
        } ],
        "tags" : "Element,Container,WebBrowser"
      } ],
      "documentation" : { },
      "id" : "1",
      "location" : "Unspecified",
      "name" : "Japanese cultural app",
      "properties" : {
        "structurizr.dsl.identifier" : "software_system"
      },
      "tags" : "Element,Software System"
    } ]
  },
  "name" : "Name",
  "properties" : {
    "structurizr.dsl" : "d29ya3NwYWNlICJOYW1lIiAiRGVzY3JpcHRpb24iIHsKCiAgICAhYWRycyBkZWNpc2lvbnMKICAgICFpZGVudGlmaWVycyBoaWVyYXJjaGljYWwKCiAgICBtb2RlbCB7CiAgICAgICAgc29mdHdhcmVfc3lzdGVtID0gc29mdHdhcmVTeXN0ZW0gIkphcGFuZXNlIGN1bHR1cmFsIGFwcCIgewogICAgICAgICAgICBhc3BpcmVfZGFzaGJvYXJkID0gY29udGFpbmVyICJBc3BpcmUgRGFzaGJvYXJkIiAiTWFuYWdlbWVudCBkYXNoYm9hcmQgdXNlZCBmb3IgbG9jYWwgZGV2ZWxvcG1lbnQiIHsKICAgICAgICAgICAgICAgIHRhZ3MgIkFzcGlyZUJhc2UiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGVsZW1ldHJ5X2NvbGxlY3RvciA9IGNvbnRhaW5lciAiVGVsZW1ldHJ5IENvbGxlY3RvciIgewogICAgICAgICAgICAgICAgLT4gYXNwaXJlX2Rhc2hib2FyZCAiUHVzaCB0ZWxlbWV0cnkiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgamFwYW5lc2VfZGF0YWJhc2UgPSBjb250YWluZXIgIk1hbmdhLkRCIiB7CiAgICAgICAgICAgICAgICB0YWdzICJEYXRhYmFzZSIKICAgICAgICAgICAgfQogICAgICAgICAgICByYXRpbmdfZGF0YWJhc2UgPSBjb250YWluZXIgIlJhdGluZy5DYWNoZSIgewogICAgICAgICAgICAgICAgdGFncyAiRGF0YWJhc2UiCiAgICAgICAgICAgIH0KICAgICAgICAgICAga2V5Y2xvYWsgPSBjb250YWluZXIgIktleWNsb2FrIiB7CiAgICAgICAgICAgICAgICB0YWdzICJTZXJ2aWNlIgogICAgICAgICAgICB9CiAgICAgICAgICAgIG1pZ3JhdGlvbl9zZXJ2aWNlID0gY29udGFpbmVyICJKYXBhbmVzZS5BcGkuTWlncmF0aW9uU2VydmljZSIgIlNlcnZpY2UgdGhhdCBjYW4gYmUgcnVuIGZyb20gdGhlIHBpcGVsaW5lIGluIG9yZGVyIHRvIGFwcGx5IG1pZ3JhdGlvbnMgdG8gdGhlIERhdGFiYXNlIiB7CiAgICAgICAgICAgICAgICAtPiBqYXBhbmVzZV9kYXRhYmFzZQogICAgICAgICAgICAgICAgLT4gdGVsZW1ldHJ5X2NvbGxlY3RvcgogICAgICAgICAgICB9CiAgICAgICAgICAgIG1lc3NhZ2VfYnJva2VyID0gY29udGFpbmVyICJSYWJiaXRNcSIgewogICAgICAgICAgICAgICAgdGFncyAiTWVzc2FnZWJyb2tlciIKICAgICAgICAgICAgfQogICAgICAgICAgICBtYW5nYV9hcGkgPSBjb250YWluZXIgIkphcGFuZXNlLkFwaSIgewogICAgICAgICAgICAgICAgdGFncyAiU2VydmljZSIKICAgICAgICAgICAgICAgIC0+IGphcGFuZXNlX2RhdGFiYXNlCiAgICAgICAgICAgICAgICAtPiB0ZWxlbWV0cnlfY29sbGVjdG9yCiAgICAgICAgICAgICAgICAtPiBrZXljbG9hayAiQXV0aCIgIkhUVFAiCiAgICAgICAgICAgICAgICAtPiBtZXNzYWdlX2Jyb2tlciAiUHViL1N1YiIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZ3JvdXAgIlV0aWxpdGllcyIgewogICAgICAgICAgICAgICAgICAgIG1lZGlhdHIgPSBjb21wb25lbnQgIk1lZGlhdFIiCiAgICAgICAgICAgICAgICAgICAgT3RlbCA9IGNvbXBvbmVudCAiT1RlbCIKICAgICAgICAgICAgICAgICAgICBhdXRoID0gY29tcG9uZW50ICJBdXRoIgogICAgICAgICAgICAgICAgICAgIGVycm9yX2ZpbHRlcnMgPSBjb21wb25lbnQgIkVycm9yRmlsdGVycyIKICAgICAgICAgICAgICAgICAgICBoYW5nZmlyZSA9IGNvbXBvbmVudCAiSGFuZ2ZpcmUiCiAgICAgICAgICAgICAgICAgICAgbWFzc3RyYW5zaXQgPSBjb21wb25lbnQgIk1hc3N0cmFuc2l0IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZ3JvdXAgIkFuaW1lIG1vZHVsZSIgewogICAgICAgICAgICAgICAgICAgIGdyYXBocWxfdG9waWNfZXZlbnRfc2VuZGVyID0gY29tcG9uZW50ICJHcmFwaFFMIHRvcGljIGV2ZW50IHNlbmRlciIKICAgICAgICAgICAgICAgICAgICBhbmltZV9tb2RlbCA9IGNvbXBvbmVudCAiQW5pbWUiICJEb21haW4gbW9kZWwiCiAgICAgICAgICAgICAgICAgICAgYW5pbWVfY29uZmlndXJhdGlvbiA9IGNvbXBvbmVudCAiQW5pbWUgREIgQ29uZmlndXJhdGlvbiIgIkNvbmZpZ3VyZSBob3cgdGhlIEFuaW1lIG1vZGVsIG1hcHMgdG8gdGhlIGRhdGFiYXNlIHRhYmxlIiB7CiAgICAgICAgICAgICAgICAgICAgICAgIC0+IGFuaW1lX21vZGVsICJDb25maWd1cmUiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGFuaW1lX2RhdGFfY29udGV4dCA9IGNvbXBvbmVudCAiQW5pbWUgRGJDb250ZXh0IiAiRGJDb250ZXh0IHRoYXQgbWFwcyB0byB0aGUgQW5pbWUgU2NoZW1hIiB7CiAgICAgICAgICAgICAgICAgICAgICAgIC0+IGphcGFuZXNlX2RhdGFiYXNlCiAgICAgICAgICAgICAgICAgICAgICAgIC0+IGFuaW1lX2NvbmZpZ3VyYXRpb24gIlVzZSBjb25maWd1cmF0aW9uIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBhbmltZV9tZXNzYWdpbmdfbm90aWZpY2F0aW9uX2hhbmRsZXIgPSBjb21wb25lbnQgIk1lc3NhZ2luZyBOb3RpZmljYXRpb24gSGFuZGxlciIgewogICAgICAgICAgICAgICAgICAgICAgICAtPiBtZXNzYWdlX2Jyb2tlciAiUHVibGlzaCBub3RpZmljYXRpb24iICJNYXNzdHJhbnNpdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYW5pbWVfZ3JhcGhxbF9ub3RpZmljYXRpb25faGFuZGxlciA9IGNvbXBvbmVudCAiR3JhcGhRTCBOb3RpZmljYXRpb24gSGFuZGxlciIgewogICAgICAgICAgICAgICAgICAgICAgICAtPiBncmFwaHFsX3RvcGljX2V2ZW50X3NlbmRlciAiUHVibGlzaCBldmVudCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYW5pbWVfY29tbWFuZF9oYW5kbGVycyA9IGNvbXBvbmVudCAiQW5pbWUgY29tbWFuZCBoYW5kbGVycyIgewogICAgICAgICAgICAgICAgICAgICAgICAtPiBhbmltZV9kYXRhX2NvbnRleHQgIk11dGF0ZSBkYXRhIgogICAgICAgICAgICAgICAgICAgICAgICAtPiBhbmltZV9tZXNzYWdpbmdfbm90aWZpY2F0aW9uX2hhbmRsZXIgIlB1Ymxpc2ggbm90aWZpY2F0aW9uIiAiTWVkaWF0UiIKICAgICAgICAgICAgICAgICAgICAgICAgLT4gYW5pbWVfZ3JhcGhxbF9ub3RpZmljYXRpb25faGFuZGxlciAiUHVibGlzaCBub3RpZmljYXRpb24iICJNZWRpYXRSIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBhbmltZV9kYXRhX2xvYWRlciA9IGNvbXBvbmVudCAiQW5pbWUgRGF0YUxvYWRlcnMiIHsKICAgICAgICAgICAgICAgICAgICAgICAgLT4gYW5pbWVfZGF0YV9jb250ZXh0ICJCYXRjaCBxdWVyeSBkYXRhIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBhbmltZV9xdWVyeV9oYW5kbGVycyA9IGNvbXBvbmVudCAiQW5pbWUgcXVlcnkgaGFuZGxlcnMiIHsKICAgICAgICAgICAgICAgICAgICAgICAgLT4gYW5pbWVfZGF0YV9sb2FkZXIgIlF1ZXJ5IGRhdGEiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGFuaW1lX25vZGUgPSBjb21wb25lbnQgIkFuaW1lIG5vZGUiICJDb25maWd1cmUgaG93IEFuaW1lIG1vZGVsIGlzIGV4cG9zZWQgdmlhIEdyYXBoUUwiIHsKICAgICAgICAgICAgICAgICAgICAgICAgLT4gYW5pbWVfbW9kZWwgIkNvbmZpZ3VyZSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYW5pbWVfbXV0YXRpb25zID0gY29tcG9uZW50ICJBbmltZSBtdXRhdGlvbnMiIHsKICAgICAgICAgICAgICAgICAgICAgICAgLT4gYW5pbWVfY29tbWFuZF9oYW5kbGVycyAiU2VuZCBjb21tYW5kIiAiTWVkaWF0UiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYW5pbWVfcXVlcmllcyA9IGNvbXBvbmVudCAiQW5pbWUgcXVlcmllcyIgewogICAgICAgICAgICAgICAgICAgICAgICAtPiBhbmltZV9xdWVyeV9oYW5kbGVycyAiU2VuZCBxdWVyeSIgIk1lZGlhdFIiCiAgICAgICAgICAgICAgICAgICAgICAgIC0+IGFuaW1lX25vZGUgIkV4cG9zZSBmb3IgcXVlcmluZyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYW5pbWVfc3Vic2NyaXB0aW9ucyA9IGNvbXBvbmVudCAiQW5pbWUgc3Vic2NyaXB0aW9ucyIgewogICAgICAgICAgICAgICAgICAgICAgICAtPiBncmFwaHFsX3RvcGljX2V2ZW50X3NlbmRlciAiU3Vic2NyaWJlIHRvIGFuaW1lIGV2ZW50cyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBncm91cCAiTWFuZ2EgbW9kdWxlIiB7CiAgICAgICAgICAgICAgICAgICAgbWFuZ2FfbW9kZWwgPSBjb21wb25lbnQgIk1hbmdhIiAiRG9tYWluIG1vZGVsIgogICAgICAgICAgICAgICAgICAgIGF1dGhvcl9tb2RlbCA9IGNvbXBvbmVudCAiQXV0aG9yIiAiRG9tYWluIG1vZGVsIgogICAgICAgICAgICAgICAgICAgIG1hbmdhX2NvbmZpZ3VyYXRpb24gPSBjb21wb25lbnQgIk1hbmdhIENvbmZpZ3VyYXRpb24iICJDb25maWd1cmUgaG93IHRoZSBNYW5nYSBtb2RlbCBtYXBzIHRvIHRoZSBkYXRhYmFzZSB0YWJsZSJ7CiAgICAgICAgICAgICAgICAgICAgICAgIC0+IG1hbmdhX21vZGVsICJDb25maWd1cmUiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGF1dGhvcl9jb25maWd1cmF0aW9uID0gY29tcG9uZW50ICJBdXRob3IgQ29uZmlndXJhdGlvbiIgIkNvbmZpZ3VyZSBob3cgdGhlIEF1dGhvciBtb2RlbCBtYXBzIHRvIHRoZSBkYXRhYmFzZSB0YWJsZSIgewogICAgICAgICAgICAgICAgICAgICAgICAtPiBhdXRob3JfbW9kZWwgIkNvbmZpZ3VyZSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYXV0aG9yX3NldHRpbmdzX21vZGVsID0gY29tcG9uZW50ICJBdXRob3IgU2V0dGluZ3MgTW9kdWxlIiAiQ29uZmlndXJlIGR5bmFtaWMgc2V0dGluZ3MgZmllbGQgZm9yIGdyYXBocWwgbm9kZSBhbmQgbWFwIHRvIG1vZGVsIHByb3BlcnR5IiB7CiAgICAgICAgICAgICAgICAgICAgICAgIC0+IGF1dGhvcl9tb2RlbCAiQ29uZmlndXJlIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBtYW5nYV9kYXRhX2NvbnRleHQgPSBjb21wb25lbnQgIk1hbmdhIERiQ29udGV4dCIgIkRiQ29udGV4dCB0aGF0IG1hcHMgdG8gdGhlIE1hbmdhIFNjaGVtYSIgewogICAgICAgICAgICAgICAgICAgICAgICAtPiBqYXBhbmVzZV9kYXRhYmFzZQogICAgICAgICAgICAgICAgICAgICAgICAtPiBtYW5nYV9jb25maWd1cmF0aW9uICJVc2UgY29uZmlndXJhdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgLT4gYXV0aG9yX2NvbmZpZ3VyYXRpb24gIlVzZSBjb25maWd1cmF0aW9uIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBtYW5nYV9xdWVyeV9oYW5kbGVyID0gY29tcG9uZW50ICJNYW5nYSBRdWVyeSBIYW5kbGVyIiAiUmV0dXJuIElRdWVyeWFibGUgYW5kIGFsbG93IEdyYXBoUUwgZXhlY3V0aW9uIGVuZ2luZSB0byBkaXJlY3RseSB0YXAgaW50byB0aGUgRWZDb3JlIERiQ29udGV4dCB0byBidWlsZCBxdWVyaWVzIGFuZCBwcm9qZWN0aW9ucyIgewogICAgICAgICAgICAgICAgICAgICAgICAtPiBtYW5nYV9kYXRhX2NvbnRleHQgIlF1ZXJ5IGRhdGEiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIG1hbmdhX3F1ZXJpZXMgPSBjb21wb25lbnQgIk1hbmdhIFF1ZXJpZXMiIHsKICAgICAgICAgICAgICAgICAgICAgICAgLT4gbWFuZ2FfcXVlcnlfaGFuZGxlciAiU2VuZCBxdWVyeSIgIk1lZGlhdFIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZ3JhcGhRTF9leGVjdXRpb25fZW5naW5lID0gY29tcG9uZW50ICJHcmFwaFFMIGVuZ2luZSIgewogICAgICAgICAgICAgICAgICAgIC0+IGFuaW1lX211dGF0aW9ucwogICAgICAgICAgICAgICAgICAgIC0+IGFuaW1lX3F1ZXJpZXMKICAgICAgICAgICAgICAgICAgICAtPiBhbmltZV9zdWJzY3JpcHRpb25zCiAgICAgICAgICAgICAgICAgICAgLT4gbWFuZ2FfcXVlcmllcwogICAgICAgICAgICAgICAgICAgIC0+IGF1dGhvcl9zZXR0aW5nc19tb2RlbCAiTG9hZCBjb25maWd1cmF0aW9uIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZmFpcnlicmVhZF92YWxpZGF0b3IgPSBjb21wb25lbnQgIkZhaXJ5QnJlYWQiICJWYWxpZGF0ZSBHcmFwaFFMIHJlcXVlc3RzIGJlZm9yZSB0aGV5IGhpdCBNZWRpYXRSIiB7CiAgICAgICAgICAgICAgICAgICAgLT4gZ3JhcGhRTF9leGVjdXRpb25fZW5naW5lICJSZWdpc3RlciB2YWxpZGF0b3JzIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaG9zdCA9IGNvbXBvbmVudCAiSG9zdCIgewogICAgICAgICAgICAgICAgICAgIC0+IGdyYXBoUUxfZXhlY3V0aW9uX2VuZ2luZSAiSG9zdCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByYXRpbmdfYXBpID0gY29udGFpbmVyICJSYXRpbmcuQVBJIiB7CiAgICAgICAgICAgICAgICB0YWdzICJTZXJ2aWNlIgogICAgICAgICAgICAgICAgLT4gcmF0aW5nX2RhdGFiYXNlCiAgICAgICAgICAgICAgICAtPiB0ZWxlbWV0cnlfY29sbGVjdG9yCiAgICAgICAgICAgICAgICAtPiBrZXljbG9hayAiQXV0aCIgIkhUVFAiCiAgICAgICAgICAgICAgICAtPiBtZXNzYWdlX2Jyb2tlciAiUHViL1N1YiIKICAgICAgICAgICAgfQogICAgICAgICAgICBhcGlfZ2F0ZXdheSA9IGNvbnRhaW5lciAiR2F0ZXdheSIgIkZ1c2lvbiBnYXRld2F5IiB7CiAgICAgICAgICAgICAgICAtPiByYXRpbmdfYXBpICJRdWVyeSBmb3IgcmF0aW5ncyIgIkdyYXBoUUwiCiAgICAgICAgICAgICAgICAtPiBtYW5nYV9hcGkgIlF1ZXJ5IGZvciBhbmltZS9tYW5nYSBpbmZvcm1hdGlvbiIgIkdyYXBoUUwiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgYXNwaXJlX2hvc3QgPSBjb250YWluZXIgIkFwcC5Ib3N0IiAiQXNwaXJlIGFwcCBob3N0IHVzZWQgZm9yIGxvY2FsIGRldmVsb3BtZW50IiB7CiAgICAgICAgICAgICAgICB0YWdzICJBc3BpcmVCYXNlIgogICAgICAgICAgICB9CiAgICAgICAgICAgIHdlYl91aSA9IGNvbnRhaW5lciAiV2ViIEFwcGxpY2F0aW9uIiB7CiAgICAgICAgICAgICAgICB0YWdzICJXZWJCcm93c2VyCiAgICAgICAgICAgICAgICAtPiBhcGlfZ2F0ZXdheSAiU2VuZCByZXF1ZXN0cyIgIkhUVFAiCiAgICAgICAgICAgICAgICAtPiBrZXljbG9hayAiQXV0aGVudGljYXRlIiAiSFRUUCIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB1c2VyID0gcGVyc29uICJDbGllbnQiIHsKICAgICAgICAgICAgLT4gc29mdHdhcmVfc3lzdGVtLndlYl91aSAiSW50ZXJhY3QiICJIVFRQIgogICAgICAgIH0KICAgIH0KCiAgICB2aWV3cyB7CiAgICAgICAgc3lzdGVtQ29udGV4dCBzb2Z0d2FyZV9zeXN0ZW0gIkRpYWdyYW0xIiB7CiAgICAgICAgICAgIGluY2x1ZGUgKgogICAgICAgICAgICBhdXRvbGF5b3V0IGxyCiAgICAgICAgfQoKICAgICAgICBjb250YWluZXIgc29mdHdhcmVfc3lzdGVtICJqYXBhbmVzZV9jdWx0dXJlX3N5c3RlbSIgewogICAgICAgICAgICBpbmNsdWRlICoKICAgICAgICAgICAgYXV0b2xheW91dCBscgogICAgICAgIH0KICAgICAgICBjb21wb25lbnQgc29mdHdhcmVfc3lzdGVtLm1hbmdhX2FwaSAibWFuZ2FfYXBpX2NvbXBvbmVudCIgewogICAgICAgICAgICBpbmNsdWRlICoKICAgICAgICAgICAgYXV0b2xheW91dCBscgogICAgICAgIH0KCgoKICAgICAgICBzdHlsZXMgewogICAgICAgICAgICBlbGVtZW50ICJFbGVtZW50IiB7CiAgICAgICAgICAgICAgICBjb2xvciAjZmZmZmZmCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxlbWVudCAiUGVyc29uIiB7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kICMwNDhjMDQKICAgICAgICAgICAgICAgIHNoYXBlIHBlcnNvbgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsZW1lbnQgIlNvZnR3YXJlIFN5c3RlbSIgewogICAgICAgICAgICAgICAgYmFja2dyb3VuZCAjMDQ3ODA0CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxlbWVudCAiQ29udGFpbmVyIiB7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kICM1NWFhNTUKICAgICAgICAgICAgfQogICAgICAgICAgICBlbGVtZW50ICJDb21wb25lbnQiIHsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQgIzU1YWE1NQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsZW1lbnQgIkFzcGlyZUJhc2UiIHsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQgIzcyNDJmNQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsZW1lbnQgIkRhdGFiYXNlIiB7CiAgICAgICAgICAgICAgICBzaGFwZSBjeWxpbmRlcgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsZW1lbnQgIk1lc3NhZ2Vicm9rZXIiIHsKICAgICAgICAgICAgICAgIHNoYXBlIFBpcGUKICAgICAgICAgICAgfQogICAgICAgICAgICBlbGVtZW50ICJXZWJCcm93c2VyIiB7CiAgICAgICAgICAgICAgICBzaGFwZSBXaW5kb3cKICAgICAgICAgICAgfQogICAgICAgICAgICBlbGVtZW50ICJNb2JpbGVBcHAiIHsKICAgICAgICAgICAgICAgIHNoYXBlIE1vYmlsZURldmljZVBvcnRyYWl0CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxlbWVudCAiU2VydmljZSIgewogICAgICAgICAgICAgICAgc2hhcGUgaGV4YWdvbgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsZW1lbnQgIkZpbGVTdG9yYWdlIiB7CiAgICAgICAgICAgICAgICBzaGFwZSBmb2xkZXIKICAgICAgICAgICAgfQogICAgICAgICAgICBlbGVtZW50ICJFeHRlcm5hbEFjdG9yIiB7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kICM5OTk5OTkKICAgICAgICAgICAgfQogICAgICAgICAgICBlbGVtZW50ICJFeHRlcm5hbFN5c3RlbSIgewogICAgICAgICAgICAgICAgYmFja2dyb3VuZCAjOTk5OTk5CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxlbWVudCAiT2JzZXJ2YWJpbGl0eUJFIiB7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kICNlYmM5MzQKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBjb25maWd1cmF0aW9uIHsKICAgICAgICBzY29wZSBzb2Z0d2FyZXN5c3RlbQogICAgfQoKfQ=="
  },
  "views" : {
    "componentViews" : [ {
      "automaticLayout" : {
        "applied" : false,
        "edgeSeparation" : 0,
        "implementation" : "Graphviz",
        "nodeSeparation" : 300,
        "rankDirection" : "LeftRight",
        "rankSeparation" : 300,
        "vertices" : false
      },
      "containerId" : "12",
      "elements" : [ {
        "id" : "5",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "11",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "17",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "18",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "19",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "20",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "21",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "22",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "23",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "24",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "25",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "27",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "30",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "32",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "34",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "38",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "40",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "42",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "44",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "46",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "49",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "51",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "52",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "53",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "55",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "57",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "59",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "63",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "65",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "67",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "73",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "75",
        "x" : 0,
        "y" : 0
      } ],
      "externalContainerBoundariesVisible" : false,
      "key" : "manga_api_component",
      "order" : 3,
      "relationships" : [ {
        "id" : "26"
      }, {
        "id" : "28"
      }, {
        "id" : "29"
      }, {
        "id" : "31"
      }, {
        "id" : "33"
      }, {
        "id" : "35"
      }, {
        "id" : "36"
      }, {
        "id" : "37"
      }, {
        "id" : "39"
      }, {
        "id" : "41"
      }, {
        "id" : "43"
      }, {
        "id" : "45"
      }, {
        "id" : "47"
      }, {
        "id" : "48"
      }, {
        "id" : "50"
      }, {
        "id" : "54"
      }, {
        "id" : "56"
      }, {
        "id" : "58"
      }, {
        "id" : "60"
      }, {
        "id" : "61"
      }, {
        "id" : "62"
      }, {
        "id" : "64"
      }, {
        "id" : "66"
      }, {
        "id" : "68"
      }, {
        "id" : "69"
      }, {
        "id" : "70"
      }, {
        "id" : "71"
      }, {
        "id" : "72"
      }, {
        "id" : "74"
      }, {
        "id" : "76"
      } ]
    } ],
    "configuration" : {
      "branding" : { },
      "lastSavedView" : "manga_api_component",
      "styles" : {
        "elements" : [ {
          "color" : "#ffffff",
          "tag" : "Element"
        }, {
          "background" : "#048c04",
          "shape" : "Person",
          "tag" : "Person"
        }, {
          "background" : "#047804",
          "tag" : "Software System"
        }, {
          "background" : "#55aa55",
          "tag" : "Container"
        }, {
          "background" : "#55aa55",
          "tag" : "Component"
        }, {
          "background" : "#7242f5",
          "tag" : "AspireBase"
        }, {
          "shape" : "Cylinder",
          "tag" : "Database"
        }, {
          "shape" : "Pipe",
          "tag" : "Messagebroker"
        }, {
          "shape" : "Window",
          "tag" : "WebBrowser"
        }, {
          "shape" : "MobileDevicePortrait",
          "tag" : "MobileApp"
        }, {
          "shape" : "Hexagon",
          "tag" : "Service"
        }, {
          "shape" : "Folder",
          "tag" : "FileStorage"
        }, {
          "background" : "#999999",
          "tag" : "ExternalActor"
        }, {
          "background" : "#999999",
          "tag" : "ExternalSystem"
        }, {
          "background" : "#ebc934",
          "tag" : "ObservabilityBE"
        } ]
      },
      "terminology" : { }
    },
    "containerViews" : [ {
      "automaticLayout" : {
        "applied" : false,
        "edgeSeparation" : 0,
        "implementation" : "Graphviz",
        "nodeSeparation" : 300,
        "rankDirection" : "LeftRight",
        "rankSeparation" : 300,
        "vertices" : false
      },
      "elements" : [ {
        "id" : "2",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "3",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "5",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "6",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "7",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "8",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "11",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "12",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "77",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "82",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "85",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "86",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "89",
        "x" : 0,
        "y" : 0
      } ],
      "externalSoftwareSystemBoundariesVisible" : false,
      "key" : "japanese_culture_system",
      "order" : 2,
      "relationships" : [ {
        "id" : "10"
      }, {
        "id" : "13"
      }, {
        "id" : "14"
      }, {
        "id" : "15"
      }, {
        "id" : "16"
      }, {
        "id" : "4"
      }, {
        "id" : "78"
      }, {
        "id" : "79"
      }, {
        "id" : "80"
      }, {
        "id" : "81"
      }, {
        "id" : "83"
      }, {
        "id" : "84"
      }, {
        "id" : "87"
      }, {
        "id" : "88"
      }, {
        "id" : "9"
      }, {
        "id" : "90"
      } ],
      "softwareSystemId" : "1"
    } ],
    "systemContextViews" : [ {
      "automaticLayout" : {
        "applied" : false,
        "edgeSeparation" : 0,
        "implementation" : "Graphviz",
        "nodeSeparation" : 300,
        "rankDirection" : "LeftRight",
        "rankSeparation" : 300,
        "vertices" : false
      },
      "elements" : [ {
        "id" : "1",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "89",
        "x" : 0,
        "y" : 0
      } ],
      "enterpriseBoundaryVisible" : true,
      "key" : "Diagram1",
      "order" : 1,
      "relationships" : [ {
        "id" : "91"
      } ],
      "softwareSystemId" : "1"
    } ]
  }
}